name: logging_test 
random_seed: 42
dataset: imagenette_imagefolder_classification
dataset_params:
  df: null 
  test_sample: 0.2 
  val_sample: 0.05
  tabular_sampling: imagefolder_notest 
  # spatially tile along the x axis: tile_x = (size_x, stride_x)
  tile_x: []
  # spatially tile along the y axis: tile_y = (size_y, stride_y)
  tile_y: []
  spatial_sampling: null 
  bands: [] 

dataloader_params:
  # effective batch size = batch_size // gradient_accumulation
  batch_size: 64 
  gradient_accumulation: 1
  num_workers: 2 
  persistent_workers: True
  pin_memory: False

metric: accuracy 
metric_params: null

nn: alexnet 
nn_params:
  num_layers: null 
  weights: imagenet 

criterion: cross_entropy
criterion_params:
  reduction: mean

optimizer: sgd 
optimizer_params:
   lr: 5.0e-6
   momentum: 0.9
   weight_decay: 5.0e-4

scheduler: null
scheduler_params:
  gamma: 0.1

transforms_script: |
  from torch import float32
  from torchvision.transforms import v2 as T
  image_pre = T.Compose([
    T.ToImage(),
    T.ToDtype(float32, scale = True),
    T.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)),
  ])
  target_pre = T.Compose([
    T.ToImage(),
    T.ToDtype(float32, scale = False),
  ])
  train_aug = T.Compose([
    T.Resize(224),
    T.RandomHorizontalFlip(0.5),
    T.RandomCrop((224, 224))
  ])
  eval_aug = T.CenterCrop(224)

log_params:
  log_every_n_steps: 10 
  log_every_n_epochs: 2
  log_model_outputs: 0
  log_models: -1 
  log_to_h5: True
  log_to_wandb: True
  wandb_params:
    tags: ["alexnet", "imagenette"]
    notes: "testing wandb logging" 

trainer_task: fit 
trainer_params:
  max_epochs: 10 
  check_val_every_n_epoch: 2
  num_sanity_val_steps: 0
  log_every_n_steps: 10 
  enable_checkpointing: True
  enable_model_summary: True 