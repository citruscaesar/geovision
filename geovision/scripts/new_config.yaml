project_name: ilsvrc
run_name: logging_test 
random_seed: 42

dataset_name: imagenet_hdf5_classification
dataset_params:
  df: null 
  tabular_sampler_name: imagefolder_notest
  tabular_sampler_params:
    val_frac: 0.05
  spatial_sampler_name: null
  spatial_sampler_params:
    tile_x: []
    tile_y: []
  spectral_sampler_name: null 
  spectral_sampler_params: null

dataloader_params:
  # effective batch size = batch_size // gradient_accumulation
  batch_size: 128 
  gradient_accumulation: 1
  num_workers: 4 
  persistent_workers: False
  pin_memory: False 
  prefetch_factor: 2

metric_name: accuracy 
metric_params: null

model_name: alexnet 
model_params:
  num_layers: null 
  weights: imagenet 

criterion_name: cross_entropy
criterion_params:
  reduction: mean

optimizer_name: sgd 
optimizer_params:
   lr: 5.0e-6
   momentum: 0.9
   weight_decay: 5.0e-4

scheduler_name: reduce_lr_on_plateau 
scheduler_params:
  gamma: 0.1
scheduler_config_params:
  monitor: val_loss

transforms_script: |
  from torch import float32
  from torchvision.transforms import v2 as T
  image_pre = T.Compose([
    T.ToImage(),
    T.ToDtype(float32, scale = True),
    T.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)),
    T.Resize((224, 224))
  ])
  target_pre = T.Compose([
    T.ToImage(),
    T.ToDtype(float32, scale = False),
  ])
  train_aug = T.Compose([
    T.Resize((224)),
    T.RandomHorizontalFlip(0.5),
    T.RandomCrop((224, 224))
  ])
  eval_aug = T.CenterCrop(224)

log_params:
  log_every_n_steps: 10 
  log_every_n_epochs: 2
  log_model_outputs: 0
  log_models: -1 # enable checkpointing
  log_to_h5: True
  log_to_wandb: True
  log_to_csv: True
  wandb_params:
    tags: ["alexnet", "imagenette"]
    notes: "testing wandb logging" 

trainer_task: fit 
trainer_params:
  max_epochs: 10 
  num_sanity_val_steps: 0
  enable_model_summary: True 