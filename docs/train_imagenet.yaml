project_name: imagenet
run_name: testing_dataloading 
random_seed: 42

trainer_task: fit 
trainer_params:
  max_epochs: 1 
  precision: '16-mixed' 
  num_sanity_val_steps: 0
  enable_model_summary: True

log_params:
  log_to_h5: False 
  log_to_wandb: False 
  log_to_csv: True 
  wandb_init_params:
    tags: ["imagenet", "resnet50"]
    notes: "training from scratch" 
  log_every_n_steps: 10
  log_every_n_epochs: 1
  log_models: False 

dataset_name: imagenet.Imagenet_1K_MultiClass_HDF5
dataset_params:
  df: null 
  tabular_sampler_name: imagenet 
  tabular_sampler_params:
    val_frac: 0.05 
    split_on: label_str
  spatial_sampler_name: null
  spatial_sampler_params:
    tile: []
    stride: []
  spectral_sampler_name: null 
  spectral_sampler_params: null
  batch_transform_name: mixup 
  batch_transform_params: 
    alpha: 0.4
  transforms: |
    from torch import float32
    from torchvision.transforms import v2 as T
    image_pre = T.Compose([
      T.ToImage(),
      T.Resize(128),
      T.ToDtype(float32, scale = True),
      T.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)),
    ])
    train_aug = T.Compose([
      T.RandomCrop(160),
      T.AutoAugment(),
      T.RandomVerticalFlip(0.5),
      T.RandomHorizontalFlip(0.5),
      T.ToDtype(float32, scale = True),
      T.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)),
    ])
    eval_aug = T.Compose([
      T.FiveCrop(224),
      T.ToDtype(float32, scale = True),
      T.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)),
    ])
    target_pre = None 
  
dataloader_params:
  # effective batch size = batch_size // gradient_accumulation
  batch_size: 64
  gradient_accumulation: 1
  num_workers: 8
  persistent_workers: False 
  pin_memory: True 
  prefetch_factor: 2

model_name: geovision.models.modules.Classifier
model_params: 
  # a valid ckpt path means the litmodule state dict will be loaded from here, and :weights in the encoder/deocder params will be ignored
  # however the ckpt is checked to contain these same encoder and decoders
  ckpt_path: null
  encoder_name: geovision.models.resnet.ResNetFeatureExtractor
  encoder_params:
    layers: 50 
    residual_block_name: bottleneck
    weights_init: torchvision 
    weights_param: ResNet50_Weights.DEFAULT
  decoder_name: geovision.models.blocks.LinearDecoder
  decoder_params:
    in_features: 2048 
    weights_init: torchvision
    weights_param: ResNet50_Weights.DEFAULT


    
metric_name: Accuracy 
metric_params: null
 
criterion_name: CrossEntropyLoss
criterion_params:
  reduction: mean

optimizer_name: SGD 
optimizer_params:
  lr: 5.0e-6
  momentum: 0.9
  weight_decay: 5.0e-4

scheduler_name: LinearLR 
scheduler_params:
  start_factor: 1.0 
  end_factor: 0.001 
  total_iters: 5

warmup_scheduler_name: LinearLR 
warmup_scheduler_params:
  start_factor: 0.001 
  end_factor: 0.9 
  total_iters: 200 
warmup_steps: 200 

scheduler_config_params:
  interval: epoch 
  frequency: 3
  monitor: train_loss_epoch 
